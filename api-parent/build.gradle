import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    ext {
        spring_boot_version = '2.4.5.RELEASE'
    }

    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.36.0'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

plugins {
	id 'org.springframework.boot' version '2.4.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
}
apply plugin: 'maven'

group = 'tw.com.chinalife'
version = '0.0.1'

def isDevBuild
def isReleaseBuild
def sonatypeRepositoryUrl
if (hasProperty('release')) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
} else if (hasProperty('ci')) {
    version += '-SNAPSHOT'
    sonatypeRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
} else {
    isDevBuild = true
    version += '-SNAPSHOT'
}


allprojects {
    repositories {
    	mavenLocal()
        mavenCentral();
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = rootProject.group
    version = rootProject.version
    
    ext['guava.version'] = '30.0-jre'
    ext['retrofit.version'] = '2.9.0'
    
    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
        
    	dependencies {
            dependency 'com.google.guava:guava:' + ext['guava.version']
            dependency 'com.github.stefanbirkner:system-lambda:1.1.1'
            dependencySet(group: 'com.squareup.retrofit2', version: ext['retrofit.version']) {
                entry 'converter-jackson'
                entry 'retrofit'
            }
            dependencySet(group: 'io.jsonwebtoken', version: '0.11.2') {
                entry 'jjwt-api'
                entry 'jjwt-impl'
                entry 'jjwt-jackson'
            }                        
		}
    }
    
    dependencies {
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        // http://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor

        testImplementation 'com.google.guava:guava'
        testImplementation 'com.github.stefanbirkner:system-lambda'
        testImplementation 'com.squareup.okhttp3:mockwebserver'
        testImplementation 'org.hibernate.validator:hibernate-validator'
        testImplementation 'org.springframework.boot:spring-boot-starter-test' // MockHttpServletRequest
        testImplementation 'org.springframework.boot:spring-boot-starter-logging'
    }
    compileJava.dependsOn(processResources)
    compileJava.options.encoding = 'UTF-8'
    
    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                'Implementation-Version': archiveVersion
        }
    }


      if (!project.name.startsWith('sample-') && !project.name.startsWith('test-')) {
        task sourcesJar(type: Jar, dependsOn: 'classes') {
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
        }
        artifacts {
            archives  sourcesJar
        }
      }
            
		test {
			useJUnitPlatform()
		}   
}
 
[':api-core',':api-client',':api-producer'].each { projectName ->
    project(projectName) { project ->
        apply plugin: 'signing'    
        apply plugin: 'maven-publish'
        signing {
        	required  { isReleaseBuild }
            sign configurations.archives
        }
      
   		publishing {
            repositories {
                if (isReleaseBuild) {
                    maven {
                        url = sonatypeRepositoryUrl
                        credentials {
                            username sonatypeUsername
                            password sonatypePassword
                        }
                    }
                }
            }    		
            publications {           	
                mavenJava(MavenPublication) {
                	from components.java
                	versionMapping {
		                usage('java-api') {
		                    fromResolutionOf('runtimeClasspath')
		                }
		                usage('java-runtime') {
		                    fromResolutionResult()
		                }
            		}
                    pom {
                        name = project.name
                        description = project.description

                        licenses {
                            license {
                                name = 'Apache'
                                url = 'https://opensource.org/licenses/Apache-2.0'
                            }
                        }
               
                    }
                }
            }
        }     

 	}
	
}

